/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package edu.nps.deep.be.avro.schemas;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DiskImageSplit63M extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DiskImageSplit63M\",\"namespace\":\"edu.nps.deep.be.avro.schemas\",\"fields\":[{\"name\":\"fileoffset\",\"type\":\"long\"},{\"name\":\"datalength\",\"type\":\"long\"},{\"name\":\"data\",\"type\":{\"type\":\"fixed\",\"name\":\"SplitData63M\",\"size\":66060288}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long fileoffset;
  @Deprecated public long datalength;
  @Deprecated public edu.nps.deep.be.avro.schemas.SplitData63M data;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public DiskImageSplit63M() {}

  /**
   * All-args constructor.
   */
  public DiskImageSplit63M(java.lang.Long fileoffset, java.lang.Long datalength, edu.nps.deep.be.avro.schemas.SplitData63M data) {
    this.fileoffset = fileoffset;
    this.datalength = datalength;
    this.data = data;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return fileoffset;
    case 1: return datalength;
    case 2: return data;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: fileoffset = (java.lang.Long)value$; break;
    case 1: datalength = (java.lang.Long)value$; break;
    case 2: data = (edu.nps.deep.be.avro.schemas.SplitData63M)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'fileoffset' field.
   */
  public java.lang.Long getFileoffset() {
    return fileoffset;
  }

  /**
   * Sets the value of the 'fileoffset' field.
   * @param value the value to set.
   */
  public void setFileoffset(java.lang.Long value) {
    this.fileoffset = value;
  }

  /**
   * Gets the value of the 'datalength' field.
   */
  public java.lang.Long getDatalength() {
    return datalength;
  }

  /**
   * Sets the value of the 'datalength' field.
   * @param value the value to set.
   */
  public void setDatalength(java.lang.Long value) {
    this.datalength = value;
  }

  /**
   * Gets the value of the 'data' field.
   */
  public edu.nps.deep.be.avro.schemas.SplitData63M getData() {
    return data;
  }

  /**
   * Sets the value of the 'data' field.
   * @param value the value to set.
   */
  public void setData(edu.nps.deep.be.avro.schemas.SplitData63M value) {
    this.data = value;
  }

  /** Creates a new DiskImageSplit63M RecordBuilder */
  public static edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder newBuilder() {
    return new edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder();
  }
  
  /** Creates a new DiskImageSplit63M RecordBuilder by copying an existing Builder */
  public static edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder newBuilder(edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder other) {
    return new edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder(other);
  }
  
  /** Creates a new DiskImageSplit63M RecordBuilder by copying an existing DiskImageSplit63M instance */
  public static edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder newBuilder(edu.nps.deep.be.avro.schemas.DiskImageSplit63M other) {
    return new edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder(other);
  }
  
  /**
   * RecordBuilder for DiskImageSplit63M instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DiskImageSplit63M>
    implements org.apache.avro.data.RecordBuilder<DiskImageSplit63M> {

    private long fileoffset;
    private long datalength;
    private edu.nps.deep.be.avro.schemas.SplitData63M data;

    /** Creates a new Builder */
    private Builder() {
      super(edu.nps.deep.be.avro.schemas.DiskImageSplit63M.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.fileoffset)) {
        this.fileoffset = data().deepCopy(fields()[0].schema(), other.fileoffset);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datalength)) {
        this.datalength = data().deepCopy(fields()[1].schema(), other.datalength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing DiskImageSplit63M instance */
    private Builder(edu.nps.deep.be.avro.schemas.DiskImageSplit63M other) {
            super(edu.nps.deep.be.avro.schemas.DiskImageSplit63M.SCHEMA$);
      if (isValidValue(fields()[0], other.fileoffset)) {
        this.fileoffset = data().deepCopy(fields()[0].schema(), other.fileoffset);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.datalength)) {
        this.datalength = data().deepCopy(fields()[1].schema(), other.datalength);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.data)) {
        this.data = data().deepCopy(fields()[2].schema(), other.data);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'fileoffset' field */
    public java.lang.Long getFileoffset() {
      return fileoffset;
    }
    
    /** Sets the value of the 'fileoffset' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder setFileoffset(long value) {
      validate(fields()[0], value);
      this.fileoffset = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'fileoffset' field has been set */
    public boolean hasFileoffset() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'fileoffset' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder clearFileoffset() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'datalength' field */
    public java.lang.Long getDatalength() {
      return datalength;
    }
    
    /** Sets the value of the 'datalength' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder setDatalength(long value) {
      validate(fields()[1], value);
      this.datalength = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'datalength' field has been set */
    public boolean hasDatalength() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'datalength' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder clearDatalength() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'data' field */
    public edu.nps.deep.be.avro.schemas.SplitData63M getData() {
      return data;
    }
    
    /** Sets the value of the 'data' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder setData(edu.nps.deep.be.avro.schemas.SplitData63M value) {
      validate(fields()[2], value);
      this.data = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'data' field has been set */
    public boolean hasData() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'data' field */
    public edu.nps.deep.be.avro.schemas.DiskImageSplit63M.Builder clearData() {
      data = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public DiskImageSplit63M build() {
      try {
        DiskImageSplit63M record = new DiskImageSplit63M();
        record.fileoffset = fieldSetFlags()[0] ? this.fileoffset : (java.lang.Long) defaultValue(fields()[0]);
        record.datalength = fieldSetFlags()[1] ? this.datalength : (java.lang.Long) defaultValue(fields()[1]);
        record.data = fieldSetFlags()[2] ? this.data : (edu.nps.deep.be.avro.schemas.SplitData63M) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
